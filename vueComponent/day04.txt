day04

git的基本使用6大步

	
25、comment组件化开发（案例）  三遍

	分两大步：静态页面实现 和  动态交互实现

	静态页面实现：
		1、拆分组件	拆分页面 定义组件   最大化重用


		2、组装组件     就是把各个组件组装起来放在App.vue里面


		3、渲染组件     就是把组件拼装完后，不考虑数据，先展示出来 


		注意：webpack配置拷贝public下的css文件 "npm install copy-webpack-plugin@5.1.1",



	动态组件界面
		1、初始化数据动态显示
			初始化数据分析：
				数据类型     一般我们的数据最终都是放在一个数组内部，数组内部放对象
				数据名称     comments:[{},{},{}]
				定义在哪个组件   （看哪个组件还是哪些个组件使用到）
					数据用到不是说展示就代表用，而是说数据的增删改查都叫用到数据
					如果这个数据只是某一个组件用的，那么数据就在这一个组件当中定义
					如果这个数据在某些个组件当中用的，那么就找这些个共同的祖先组件去定义
				
			
			组件标签名和属性名大小写问题：
				基本规则：要么原样去写，要么转小写中间用-连接
				AddComment       <AddComment/>  或者  <add-comment>
   							
		2、交互（与用户的交互）
			//增删改查
			// 查
			//增删改


			对于数据的操作：
				数据在哪，操作数据的方法就要在哪定义，而不是随便的在某一个组件当中去操作数据
				想要操作数据的组件，可以通过调用操作数据的方法，间接去操作数据。

			添加和删除：
				子组件添加事件和事件回调，事件回调当中去调用外部操作数据的方法
				数据所在的组件去添加操作数据的方法
			

	props 组件通信的方式：
		props组件通信，只适用于父子组件传递
			父给子传：可以传递函数数据和非函数数据   
			子给父传：通过调用父传递过来的函数数据，然后通过实际参数给父传数据
		   
		不足（不是父子就狠麻烦） 兄弟关系，就必须先把一个数据给了父亲，然后通过父亲再给另一个

		最基础的通信，用的也是比较多的，所以必须搞定




	
	自定义事件组件 通信方式：   
		vm和组件对象之间的关系？   主要就是让组件对象和vm对象都能够使用vm原型对象中的$on和$emit

		只能是子向父传递数据：
			因为绑定事件的一方是接受数据的
			而触发事件的一方是发送数据的
			但是，只有父组件当中可以看到子组件，因此我们可以在父组件当中去给子组件绑定事件，父组件就是接受者
			而子组件当中没法看到父组件对象，没办法在子组件当中给父组件绑定事件，所以没办法作为接受者
			
		

		自定义事件就是绑定事件和触发事件
		父给子绑定事件  代表事件回调函数是在父组件当中定义
		子组件触发事件	代表子组件触发事件，传递实参是在子组件当中
		通信的数据，就是靠子组件调用函数传参传到父组件当中
		
	