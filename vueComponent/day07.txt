day07

35、跨域：
	1、是什么
		你的目标和你自己现在的位置一样还是不一样

		浏览器上的同源策略

		特点：
		1、跨域只存在于浏览器
		2、不在浏览器发请求是不会存在跨域问题的
		3、http请求分为两大类： 普通http请求和ajax请求（跨域是出现在ajax请求）
  		
	2、在什么地方    
		浏览器会跨域 服务器不会
 
	3、什么条件会跨域   
		同源（协议  ip  端口一致）不跨域  
		不同源就跨域（三个中间有一个不一样就跨域）
		
	
		http://localhost:8080/     -------  》 github    

	4、解决跨域：前端可以解决、后端解决。一般后端解决比前端解决容易


36、配置代理服务器解决跨域
	1、本身我们现在就跑在开发服务器 webpack-dev-server	
	   而这个服务器带了一个模块，这个模块可以支持我们使用代理
	
	2、原理：在浏览器发请求的时候，把这个请求发给服务器上的这个代理模块
	      再由这个代理模块转发给我们真正的服务器
	      这样的话，我们原来由浏览器直接发送请求到服务器就转化为服务器到服务器之间的请求

	3、你要让代理转发，那么得告诉代理你的这个请求需要转发
		配置以固定什么开头的路径需要代理转发，代理看到这个路径是以它开头就会帮你转发
	
	4、代理转发的时候会把路径交给真正的请求服务器，作为请求路径，需要把固定的开头去除


	5、changeOrigin: true, // 支持跨域, 如果协议/主机也不相同, 必须加上

	proxy: {
            "/api": {
                target: "http://localhost:4000",
                pathRewrite: {"^/api" : ""},
                changeOrigin:true
	    }
	}		



37、element-ui  Vue的pc端ui组件库    
			bootstrap:ui组件库

	参考官网
	
	字体文件的loader得配上，否则会有个报错	
		
	{
                test: /\.(eot|svg|ttf|woff|woff2)(\?\S*)?$/,
                loader: 'file-loader'
        }
          




38、Vuex
	1、状态管理是什么：
		Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式，是一个插件。
		它采用集中式存储管理应用的所有组件的状态（数据），并以相应的规则保证状态以一种可预测的方式发生变化。
		我们也可以认为它也是一种组件间通信的方式，并且适用于任意组件

	2、理解：对vue应用中多个组件的共享状态进行集中式的管理(读/写)
		

	3、为什么要有这个（问题）：
		1)多个视图依赖于同一状态
		2)来自不同视图的行为需要变更同一状态
		3)以前的解决办法
			a.将数据以及操作数据的行为都定义在父组件
			b.将数据以及操作数据的行为传递给需要的各个子组件(有可能需要多级传递)
		4)vuex就是用来解决这个问题的


	4、什么时候用：
		Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。
		也就是说应用简单（组件比较少）就不需要使用（但是可以），如果应用复杂，使用就会带来很大的便捷
		
	

	5、Vuex核心：把所有的共享状态数据拿出来放在Vuex中进行集中式管理	

		1、安装vuex
		2、创建单独的模块使用vuex 它是一个插件，按照插件使用方式
		3、书写四个核心对象
		4、暴露模块
		5、在Vue配置项当中注册vuex对象，store
		6、在核心对象写代码


		优化：
			1、如果用户再操作的时候就是很简单的数据更改，那么可以不用分发给actions，直接提交给mutations去更改
			2、页面上如果数据不想写的太长，可以利用getters，去计算出来，然后在组件computed当中获取计算的这个数据
			3、mapActions等
			


		Vuex4个核心概念
		state          代表初始状态数据    是一个包含n个属性（不是方法）的对象
		getters	       代表计算属性数据    是一个包含n个计算属性的方法的对象
		actions        代表用户行为数据    是一个包含n个用户行为回调方法的对象，（用来映射组件用户的行为回调函数）
		mutations      代表直接修改数据的数据  是一个包含n个直接修改状态数据方法的对象 （用来让action的行为调用）		
		注意：只能通过mutations的方法去直接修改，也就是说要想写state数据必须通过mutations
		      actions里面是用户操作的行为回调函数，它的内部可以写异步和判断
		      mutations里面是直接修改数据的函数数据，它的内部不可以写异步和判断

	6、小案例：count计算
		先按照原来的走
		在原来的基础上去更改
			1、数据转移到state
			2、用户操作对应的真实操作转移到actions
			3、对数据直接更改的操作转移到mutations
			4、用户需要使用什么计算的数据getter 转移到getters
		
		mapActions    在组件方法当中可以直接代替dispatch提交操作    映射获取到actions的方法
		
		mapMutations  在组件方法当中可以直接代替commit更改数据      映射获取到mutations的方法
	
	 	mapGetters    在computed当中可以获取根据state计算的数据     映射获取到getters的方法

		mapState      在computed当中可以获取state当中的数据	    映射获取到state的属性

	
        	...mapActions(['decrement','incrementIfOdd','incrementAsync']),  名字相同可以映射
        	...mapActions({'increment':'iincrement'})  名字不同需要这样映射



		画图：vuex原理图


	7、vue-ajax使用和案例 改版为vuex





